
gohit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  0000134a  000013de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000134a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004db  00800240  00800240  0000151e  2**0
                  ALLOC
  3 .stab         0000036c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000043  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000018cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000604  00000000  00000000  0000194f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001458  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000077a  00000000  00000000  000033ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013a5  00000000  00000000  00003b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000400  00000000  00000000  00004ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000816  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a3d  00000000  00000000  00005ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 27 02 	jmp	0x44e	; 0x44e <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e4       	ldi	r30, 0x4A	; 74
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 34       	cpi	r26, 0x40	; 64
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	17 e0       	ldi	r17, 0x07	; 7
      8c:	a0 e4       	ldi	r26, 0x40	; 64
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

}

int main( void )
{
    robo_Setup();                                          /* initialize HAL for robot       */
      a6:	0e 94 83 08 	call	0x1106	; 0x1106 <robo_Setup>
    OSInit();                                              /* initialize UCOS-II kernel      */
      aa:	0e 94 b9 06 	call	0xd72	; 0xd72 <OSInit>

    robo_motorSpeed(STOP_SPEED, STOP_SPEED);               /* Stop the robot                 */
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	60 e0       	ldi	r22, 0x00	; 0
      b4:	70 e0       	ldi	r23, 0x00	; 0
      b6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <robo_motorSpeed>
    myrobot.rspeed   = STOP_SPEED;                         /* Initialize myrobot states      */
      ba:	10 92 42 03 	sts	0x0342, r1
      be:	10 92 41 03 	sts	0x0341, r1
    myrobot.lspeed   = STOP_SPEED;
      c2:	10 92 44 03 	sts	0x0344, r1
      c6:	10 92 43 03 	sts	0x0343, r1
    myrobot.collided = 0;                                  /*  No collisioin                 */
      ca:	10 92 45 03 	sts	0x0345, r1

    OSTaskCreate(TaskStart,                                /* create TaskStart Task          */
      ce:	83 e7       	ldi	r24, 0x73	; 115
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	70 e0       	ldi	r23, 0x00	; 0
      d6:	45 e4       	ldi	r20, 0x45	; 69
      d8:	54 e0       	ldi	r21, 0x04	; 4
      da:	21 e0       	ldi	r18, 0x01	; 1
      dc:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
                (void *)0,
                (void *)&TaskStartStk[TASK_STK_SZ - 1],
                TASK_START_PRIO);
    OSStart();                                             /* Start multitasking             */
      e0:	0e 94 37 06 	call	0xc6e	; 0xc6e <OSStart>
      e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x3e>

000000e6 <TaskStart>:
    }
}
/*------Highest pririority task----------*/
/* Create all other tasks here           */
void TaskStart( void *data )
{
      e6:	1f 93       	push	r17
    OS_ticks_init();                                        /*-enable RTOS timer tick        */
      e8:	0e 94 73 08 	call	0x10e6	; 0x10e6 <OS_ticks_init>

    OSTaskCreate(CheckCollision,                            /*-Task function                 */
      ec:	80 e5       	ldi	r24, 0x50	; 80
      ee:	91 e0       	ldi	r25, 0x01	; 1
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	40 ec       	ldi	r20, 0xC0	; 192
      f6:	52 e0       	ldi	r21, 0x02	; 2
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
                (void *)0,                                  /*-nothing passed to task        */
                (void *)&ChkCollideStk[TASK_STK_SZ - 1],    /*-stack allocated to task       */
                TASK_CHKCOLLIDE_PRIO);                      /*-priority of task              */

    OSTaskCreate(CntrlMotors,                               /*-Task function                 */
      fe:	86 ea       	ldi	r24, 0xA6	; 166
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	45 ec       	ldi	r20, 0xC5	; 197
     108:	53 e0       	ldi	r21, 0x03	; 3
     10a:	24 e0       	ldi	r18, 0x04	; 4
     10c:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
                (void *)0,                                  /*-nothing passed to task        */
                (void *)&CtrlmotorStk[TASK_STK_SZ - 1],     /*-stack allocated to task       */
                TASK_CTRLMOTOR_PRIO);                       /*-priority of task              */

    OSTaskCreate(NavigRobot,                                /*-Task function                 */
     110:	8c ef       	ldi	r24, 0xFC	; 252
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	45 ec       	ldi	r20, 0xC5	; 197
     11a:	54 e0       	ldi	r21, 0x04	; 4
     11c:	25 e0       	ldi	r18, 0x05	; 5
     11e:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
                (void *)0,                                  /*-nothing passed to task        */
                (void *)&NavigBotStk[TASK_STK_SZ - 1],      /*-stack allocated to task       */
                TASK_NAVIG_PRIO);                           /*-priority of task              */
	
	OSTaskCreate(LightTracking,                                /*-Task function                 */
     122:	88 eb       	ldi	r24, 0xB8	; 184
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	40 e4       	ldi	r20, 0x40	; 64
     12c:	53 e0       	ldi	r21, 0x03	; 3
     12e:	22 e0       	ldi	r18, 0x02	; 2
     130:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
                TASK_LIGHT_PRIO);                           /*-priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
        robo_LED_toggle();                                  /* Show that we are alive        */
     134:	11 e0       	ldi	r17, 0x01	; 1
                (void *)&LightTrackingStk[TASK_STK_SZ - 1],      /*-stack allocated to task       */
                TASK_LIGHT_PRIO);                           /*-priority of task              */

    while(1)
    {
        OSTimeDlyHMSM(0, 0, 5, 0);                          /* Task period ~ 5 secs          */
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	45 e0       	ldi	r20, 0x05	; 5
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
        robo_LED_toggle();                                  /* Show that we are alive        */
     144:	85 b1       	in	r24, 0x05	; 5
     146:	81 27       	eor	r24, r17
     148:	85 b9       	out	0x05, r24	; 5
     14a:	f5 cf       	rjmp	.-22     	; 0x136 <TaskStart+0x50>

0000014c <CntrlMotors>:

    for(;;)
    {
        speed_r = myrobot.rspeed;
        speed_l = myrobot.lspeed;
        robo_motorSpeed(speed_l, speed_r);
     14c:	60 91 41 03 	lds	r22, 0x0341
     150:	70 91 42 03 	lds	r23, 0x0342
     154:	80 91 43 03 	lds	r24, 0x0343
     158:	90 91 44 03 	lds	r25, 0x0344
     15c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <robo_motorSpeed>
        OSTimeDlyHMSM(0, 0, 0, 200);                /* Task period ~ 200 ms              */
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	28 ec       	ldi	r18, 0xC8	; 200
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
     16e:	ee cf       	rjmp	.-36     	; 0x14c <CntrlMotors>

00000170 <LightTracking>:



/* Light Sensor TASK */
void LightTracking(void *data)
{
     170:	cf 92       	push	r12
     172:	df 92       	push	r13
     174:	ef 92       	push	r14
     176:	ff 92       	push	r15
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
				
				OSTimeDlyHMSM(0, 0, 0, 600);
			}

			else if (rlight > llight) {
				myrobot.lspeed = 100;
     180:	94 e6       	ldi	r25, 0x64	; 100
     182:	c9 2e       	mov	r12, r25
     184:	d1 2c       	mov	r13, r1
				myrobot.rspeed = -70;
     186:	8a eb       	ldi	r24, 0xBA	; 186
     188:	e8 2e       	mov	r14, r24
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	f8 2e       	mov	r15, r24

    for(;;)
    {
        //speed_r = myrobot.rspeed;
        //speed_l = myrobot.lspeed;
		llight = robo_lightSensorL();
     18e:	0e 94 2f 08 	call	0x105e	; 0x105e <robo_lightSensorL>
     192:	8c 01       	movw	r16, r24
        rlight = robo_lightSensorR();
     194:	0e 94 2b 08 	call	0x1056	; 0x1056 <robo_lightSensorR>
     198:	ec 01       	movw	r28, r24
		
		if (llight >= 400 && rlight >= 400) {
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	00 39       	cpi	r16, 0x90	; 144
     19e:	18 07       	cpc	r17, r24
     1a0:	1c f1       	brlt	.+70     	; 0x1e8 <LightTracking+0x78>
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	c0 39       	cpi	r28, 0x90	; 144
     1a6:	d8 07       	cpc	r29, r24
     1a8:	fc f0       	brlt	.+62     	; 0x1e8 <LightTracking+0x78>
			robo_Honk();
     1aa:	0e 94 4b 08 	call	0x1096	; 0x1096 <robo_Honk>
			if (llight > rlight) {
     1ae:	c0 17       	cp	r28, r16
     1b0:	d1 07       	cpc	r29, r17
     1b2:	4c f4       	brge	.+18     	; 0x1c6 <LightTracking+0x56>
				myrobot.lspeed = -70;
     1b4:	f0 92 44 03 	sts	0x0344, r15
     1b8:	e0 92 43 03 	sts	0x0343, r14
				myrobot.rspeed = 100;
     1bc:	d0 92 42 03 	sts	0x0342, r13
     1c0:	c0 92 41 03 	sts	0x0341, r12
     1c4:	0b c0       	rjmp	.+22     	; 0x1dc <LightTracking+0x6c>
				
				OSTimeDlyHMSM(0, 0, 0, 600);
			}

			else if (rlight > llight) {
     1c6:	0c 17       	cp	r16, r28
     1c8:	1d 07       	cpc	r17, r29
     1ca:	0c f7       	brge	.-62     	; 0x18e <LightTracking+0x1e>
				myrobot.lspeed = 100;
     1cc:	d0 92 44 03 	sts	0x0344, r13
     1d0:	c0 92 43 03 	sts	0x0343, r12
				myrobot.rspeed = -70;
     1d4:	f0 92 42 03 	sts	0x0342, r15
     1d8:	e0 92 41 03 	sts	0x0341, r14
				OSTimeDlyHMSM(0, 0, 0, 600);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	28 e5       	ldi	r18, 0x58	; 88
     1e4:	32 e0       	ldi	r19, 0x02	; 2
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <LightTracking+0x82>
			}  
		} else {
			OSTimeDlyHMSM(0, 0, 0, 100);   
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	24 e6       	ldi	r18, 0x64	; 100
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
     1f6:	cb cf       	rjmp	.-106    	; 0x18e <LightTracking+0x1e>

000001f8 <NavigRobot>:
 * Task for navigating robot
 * Write you own navigation task here
 */

void NavigRobot (void *data)
{
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
            myrobot.rspeed   =  100;          /* go straight                           */
            myrobot.lspeed   =  100;
        }
        else                                        /* obstacle is far away & no collision   */
        {
            myrobot.rspeed   = 100;           /* move forward at straight              */
     204:	c4 e6       	ldi	r28, 0x64	; 100
     206:	d0 e0       	ldi	r29, 0x00	; 0
			myrobot.lspeed   = LOW_SPEED;
			myrobot.rspeed   = LOW_SPEED;
		}
        else if (dist < 30)                         /* if obstacle is too close              */
        {
            myrobot.rspeed   = -HIGH_SPEED;          /* turn right                            */
     208:	2c e9       	ldi	r18, 0x9C	; 156
     20a:	e2 2e       	mov	r14, r18
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	f2 2e       	mov	r15, r18
            myrobot.lspeed   = LOW_SPEED;
     210:	02 e3       	ldi	r16, 0x32	; 50
     212:	10 e0       	ldi	r17, 0x00	; 0
{
    int dist;

    for (;;)
    {
        dist = robo_distSensor();                   /* Read distance sensor                 */
     214:	0e 94 04 08 	call	0x1008	; 0x1008 <robo_distSensor>
     218:	9c 01       	movw	r18, r24

        if (myrobot.collided == 1)                  /* If collided then stop                */
     21a:	80 91 45 03 	lds	r24, 0x0345
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	81 f4       	brne	.+32     	; 0x242 <NavigRobot+0x4a>
        {
            //myrobot.rspeed   = STOP_SPEED;          /* STOP */
            //myrobot.lspeed   = STOP_SPEED;
			//OSTimeDlyHMSM(0, 0, 0, 200);
			myrobot.rspeed   = -HIGH_SPEED;                             
     222:	f0 92 42 03 	sts	0x0342, r15
     226:	e0 92 41 03 	sts	0x0341, r14
            myrobot.lspeed   = -HIGH_SPEED;
     22a:	f0 92 44 03 	sts	0x0344, r15
     22e:	e0 92 43 03 	sts	0x0343, r14
			OSTimeDlyHMSM(0, 0, 2, 0);
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	42 e0       	ldi	r20, 0x02	; 2
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
     240:	10 c0       	rjmp	.+32     	; 0x262 <NavigRobot+0x6a>
			OSTimeDlyHMSM(0, 0, 0, 700);
			myrobot.rspeed   =  100;          /* go straight                           */
            myrobot.lspeed   =  100;

        }
		else if (dist < 40 && dist >= 30) {
     242:	c9 01       	movw	r24, r18
     244:	4e 97       	sbiw	r24, 0x1e	; 30
     246:	0a 97       	sbiw	r24, 0x0a	; 10
     248:	48 f4       	brcc	.+18     	; 0x25c <NavigRobot+0x64>
			myrobot.lspeed   = LOW_SPEED;
     24a:	10 93 44 03 	sts	0x0344, r17
     24e:	00 93 43 03 	sts	0x0343, r16
			myrobot.rspeed   = LOW_SPEED;
     252:	10 93 42 03 	sts	0x0342, r17
     256:	00 93 41 03 	sts	0x0341, r16
     25a:	1a c0       	rjmp	.+52     	; 0x290 <NavigRobot+0x98>
		}
        else if (dist < 30)                         /* if obstacle is too close              */
     25c:	2e 31       	cpi	r18, 0x1E	; 30
     25e:	31 05       	cpc	r19, r1
     260:	7c f4       	brge	.+30     	; 0x280 <NavigRobot+0x88>
        {
            myrobot.rspeed   = -HIGH_SPEED;          /* turn right                            */
     262:	f0 92 42 03 	sts	0x0342, r15
     266:	e0 92 41 03 	sts	0x0341, r14
            myrobot.lspeed   = LOW_SPEED;
     26a:	10 93 44 03 	sts	0x0344, r17
     26e:	00 93 43 03 	sts	0x0343, r16
            OSTimeDlyHMSM(0, 0, 0, 700);              /* Wait 1 sec for right turn to complete */
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	2c eb       	ldi	r18, 0xBC	; 188
     27a:	32 e0       	ldi	r19, 0x02	; 2
     27c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
            myrobot.rspeed   =  100;          /* go straight                           */
            myrobot.lspeed   =  100;
        }
        else                                        /* obstacle is far away & no collision   */
        {
            myrobot.rspeed   = 100;           /* move forward at straight              */
     280:	d0 93 42 03 	sts	0x0342, r29
     284:	c0 93 41 03 	sts	0x0341, r28
            myrobot.lspeed   = 100;
     288:	d0 93 44 03 	sts	0x0344, r29
     28c:	c0 93 43 03 	sts	0x0343, r28
        }
        OSTimeDlyHMSM(0, 0, 0, 500);                /* Task period ~ 500 ms                  */
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	24 ef       	ldi	r18, 0xF4	; 244
     298:	31 e0       	ldi	r19, 0x01	; 1
     29a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
     29e:	ba cf       	rjmp	.-140    	; 0x214 <NavigRobot+0x1c>

000002a0 <CheckCollision>:
    char collided;                          /* collision? 1 = yes, 0 = no               */
} myrobot;

/*------High pririority task----------*/
void CheckCollision (void *data)
{
     2a0:	1f 93       	push	r17
    for(;;)
    {
        if ( (robo_bumpSensorR() == HIT) ||         /* collide ?                         */
             (robo_bumpSensorL() == HIT)    )
        {
            myrobot.collided = 1;                   /* signal that collisioin            */
     2a2:	11 e0       	ldi	r17, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
    for(;;)
    {
        if ( (robo_bumpSensorR() == HIT) ||         /* collide ?                         */
     2a4:	0e 94 33 08 	call	0x1066	; 0x1066 <robo_bumpSensorR>
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <CheckCollision+0x14>
     2ac:	0e 94 3f 08 	call	0x107e	; 0x107e <robo_bumpSensorL>
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	19 f4       	brne	.+6      	; 0x2ba <CheckCollision+0x1a>
             (robo_bumpSensorL() == HIT)    )
        {
            myrobot.collided = 1;                   /* signal that collisioin            */
     2b4:	10 93 45 03 	sts	0x0345, r17
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <CheckCollision+0x1e>
         }
        else
        {
            myrobot.collided = 0;                   /* signal no collisioin              */
     2ba:	10 92 45 03 	sts	0x0345, r1
        }
        OSTimeDlyHMSM(0, 0, 0, 100);                /* Task period ~ 100 ms              */
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	24 e6       	ldi	r18, 0x64	; 100
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	0e 94 db 03 	call	0x7b6	; 0x7b6 <OSTimeDlyHMSM>
     2cc:	eb cf       	rjmp	.-42     	; 0x2a4 <CheckCollision+0x4>

000002ce <OSStartHighRdy>:
     2ce:	00 91 c7 04 	lds	r16, 0x04C7
     2d2:	03 95       	inc	r16
     2d4:	00 93 c7 04 	sts	0x04C7, r16
     2d8:	e0 91 5c 05 	lds	r30, 0x055C
     2dc:	f0 91 5d 05 	lds	r31, 0x055D
     2e0:	c1 91       	ld	r28, Z+
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	d1 91       	ld	r29, Z+
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f 91       	pop	r16
     2ea:	0f bf       	out	0x3f, r16	; 63
     2ec:	ff 91       	pop	r31
     2ee:	ef 91       	pop	r30
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	bf 90       	pop	r11
     316:	af 90       	pop	r10
     318:	9f 90       	pop	r9
     31a:	8f 90       	pop	r8
     31c:	7f 90       	pop	r7
     31e:	6f 90       	pop	r6
     320:	5f 90       	pop	r5
     322:	4f 90       	pop	r4
     324:	3f 90       	pop	r3
     326:	2f 90       	pop	r2
     328:	1f 90       	pop	r1
     32a:	0f 90       	pop	r0
     32c:	08 95       	ret

0000032e <OSCtxSw>:
     32e:	0f 92       	push	r0
     330:	1f 92       	push	r1
     332:	2f 92       	push	r2
     334:	3f 92       	push	r3
     336:	4f 92       	push	r4
     338:	5f 92       	push	r5
     33a:	6f 92       	push	r6
     33c:	7f 92       	push	r7
     33e:	8f 92       	push	r8
     340:	9f 92       	push	r9
     342:	af 92       	push	r10
     344:	bf 92       	push	r11
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	2f 93       	push	r18
     354:	3f 93       	push	r19
     356:	4f 93       	push	r20
     358:	5f 93       	push	r21
     35a:	6f 93       	push	r22
     35c:	7f 93       	push	r23
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
     362:	af 93       	push	r26
     364:	bf 93       	push	r27
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
     36e:	0f b7       	in	r16, 0x3f	; 63
     370:	0f 93       	push	r16
     372:	e0 91 64 05 	lds	r30, 0x0564
     376:	f0 91 65 05 	lds	r31, 0x0565
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	c1 93       	st	Z+, r28
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	d1 93       	st	Z+, r29
     382:	00 91 cc 04 	lds	r16, 0x04CC
     386:	00 93 cd 04 	sts	0x04CD, r16
     38a:	e0 91 5c 05 	lds	r30, 0x055C
     38e:	f0 91 5d 05 	lds	r31, 0x055D
     392:	e0 93 64 05 	sts	0x0564, r30
     396:	f0 93 65 05 	sts	0x0565, r31
     39a:	c1 91       	ld	r28, Z+
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	d1 91       	ld	r29, Z+
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f 91       	pop	r16
     3a4:	0f bf       	out	0x3f, r16	; 63
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	bf 91       	pop	r27
     3b0:	af 91       	pop	r26
     3b2:	9f 91       	pop	r25
     3b4:	8f 91       	pop	r24
     3b6:	7f 91       	pop	r23
     3b8:	6f 91       	pop	r22
     3ba:	5f 91       	pop	r21
     3bc:	4f 91       	pop	r20
     3be:	3f 91       	pop	r19
     3c0:	2f 91       	pop	r18
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	bf 90       	pop	r11
     3d0:	af 90       	pop	r10
     3d2:	9f 90       	pop	r9
     3d4:	8f 90       	pop	r8
     3d6:	7f 90       	pop	r7
     3d8:	6f 90       	pop	r6
     3da:	5f 90       	pop	r5
     3dc:	4f 90       	pop	r4
     3de:	3f 90       	pop	r3
     3e0:	2f 90       	pop	r2
     3e2:	1f 90       	pop	r1
     3e4:	0f 90       	pop	r0
     3e6:	08 95       	ret

000003e8 <OSIntCtxSw>:
     3e8:	00 91 cc 04 	lds	r16, 0x04CC
     3ec:	00 93 cd 04 	sts	0x04CD, r16
     3f0:	e0 91 5c 05 	lds	r30, 0x055C
     3f4:	f0 91 5d 05 	lds	r31, 0x055D
     3f8:	e0 93 64 05 	sts	0x0564, r30
     3fc:	f0 93 65 05 	sts	0x0565, r31
     400:	c1 91       	ld	r28, Z+
     402:	cd bf       	out	0x3d, r28	; 61
     404:	d1 91       	ld	r29, Z+
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f 91       	pop	r16
     40a:	0f bf       	out	0x3f, r16	; 63
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	bf 91       	pop	r27
     416:	af 91       	pop	r26
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	7f 91       	pop	r23
     41e:	6f 91       	pop	r22
     420:	5f 91       	pop	r21
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	9f 90       	pop	r9
     43a:	8f 90       	pop	r8
     43c:	7f 90       	pop	r7
     43e:	6f 90       	pop	r6
     440:	5f 90       	pop	r5
     442:	4f 90       	pop	r4
     444:	3f 90       	pop	r3
     446:	2f 90       	pop	r2
     448:	1f 90       	pop	r1
     44a:	0f 90       	pop	r0
     44c:	08 95       	ret

0000044e <OSTickISR>:
     44e:	0f 92       	push	r0
     450:	1f 92       	push	r1
     452:	2f 92       	push	r2
     454:	3f 92       	push	r3
     456:	4f 92       	push	r4
     458:	5f 92       	push	r5
     45a:	6f 92       	push	r6
     45c:	7f 92       	push	r7
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	2f 93       	push	r18
     474:	3f 93       	push	r19
     476:	4f 93       	push	r20
     478:	5f 93       	push	r21
     47a:	6f 93       	push	r22
     47c:	7f 93       	push	r23
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	af 93       	push	r26
     484:	bf 93       	push	r27
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ef 93       	push	r30
     48c:	ff 93       	push	r31
     48e:	0f b7       	in	r16, 0x3f	; 63
     490:	00 68       	ori	r16, 0x80	; 128
     492:	0f 93       	push	r16
     494:	00 91 63 05 	lds	r16, 0x0563
     498:	03 95       	inc	r16
     49a:	00 93 63 05 	sts	0x0563, r16
     49e:	01 30       	cpi	r16, 0x01	; 1
     4a0:	41 f4       	brne	.+16     	; 0x4b2 <_not_first_int>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	e0 91 64 05 	lds	r30, 0x0564
     4aa:	f0 91 65 05 	lds	r31, 0x0565
     4ae:	c1 93       	st	Z+, r28
     4b0:	d1 93       	st	Z+, r29

000004b2 <_not_first_int>:
     4b2:	04 e6       	ldi	r16, 0x64	; 100
     4b4:	06 bd       	out	0x26, r16	; 38
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	1f 2e       	mov	r1, r31
     4ba:	78 94       	sei
     4bc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <OSTimeTick>
     4c0:	00 00       	nop
     4c2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <OSIntExit>
     4c6:	0f 91       	pop	r16
     4c8:	0f bf       	out	0x3f, r16	; 63
     4ca:	ff 91       	pop	r31
     4cc:	ef 91       	pop	r30
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	bf 91       	pop	r27
     4d4:	af 91       	pop	r26
     4d6:	9f 91       	pop	r25
     4d8:	8f 91       	pop	r24
     4da:	7f 91       	pop	r23
     4dc:	6f 91       	pop	r22
     4de:	5f 91       	pop	r21
     4e0:	4f 91       	pop	r20
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	af 90       	pop	r10
     4f6:	9f 90       	pop	r9
     4f8:	8f 90       	pop	r8
     4fa:	7f 90       	pop	r7
     4fc:	6f 90       	pop	r6
     4fe:	5f 90       	pop	r5
     500:	4f 90       	pop	r4
     502:	3f 90       	pop	r3
     504:	2f 90       	pop	r2
     506:	1f 90       	pop	r1
     508:	0f 90       	pop	r0
     50a:	08 95       	ret

0000050c <OSTaskStkInit>:
     50c:	fa 01       	movw	r30, r20
     50e:	80 83       	st	Z, r24
     510:	92 93       	st	-Z, r25
     512:	12 92       	st	-Z, r1
     514:	12 92       	st	-Z, r1
     516:	12 92       	st	-Z, r1
     518:	12 92       	st	-Z, r1
     51a:	12 92       	st	-Z, r1
     51c:	12 92       	st	-Z, r1
     51e:	12 92       	st	-Z, r1
     520:	12 92       	st	-Z, r1
     522:	12 92       	st	-Z, r1
     524:	12 92       	st	-Z, r1
     526:	12 92       	st	-Z, r1
     528:	12 92       	st	-Z, r1
     52a:	12 92       	st	-Z, r1
     52c:	12 92       	st	-Z, r1
     52e:	12 92       	st	-Z, r1
     530:	12 92       	st	-Z, r1
     532:	12 92       	st	-Z, r1
     534:	12 92       	st	-Z, r1
     536:	12 92       	st	-Z, r1
     538:	12 92       	st	-Z, r1
     53a:	12 92       	st	-Z, r1
     53c:	12 92       	st	-Z, r1
     53e:	12 92       	st	-Z, r1
     540:	12 92       	st	-Z, r1
     542:	62 93       	st	-Z, r22
     544:	72 93       	st	-Z, r23
     546:	12 92       	st	-Z, r1
     548:	12 92       	st	-Z, r1
     54a:	12 92       	st	-Z, r1
     54c:	12 92       	st	-Z, r1
     54e:	12 92       	st	-Z, r1
     550:	12 92       	st	-Z, r1
     552:	80 e8       	ldi	r24, 0x80	; 128
     554:	82 93       	st	-Z, r24
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	cf 01       	movw	r24, r30
     55a:	08 95       	ret

0000055c <OSTaskCreateHook>:
     55c:	08 95       	ret

0000055e <OSTaskDelHook>:
     55e:	08 95       	ret

00000560 <OSTaskSwHook>:
     560:	08 95       	ret

00000562 <OSTaskStatHook>:
     562:	08 95       	ret

00000564 <OSTimeTickHook>:
     564:	08 95       	ret

00000566 <OSInitHookBegin>:
     566:	08 95       	ret

00000568 <OSInitHookEnd>:
     568:	08 95       	ret

0000056a <OSTaskIdleHook>:
     56a:	08 95       	ret

0000056c <OSTCBInitHook>:
     56c:	08 95       	ret

0000056e <OSIntEnter>:
     56e:	80 91 c7 04 	lds	r24, 0x04C7
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	39 f4       	brne	.+14     	; 0x584 <OSIntEnter+0x16>
     576:	80 91 63 05 	lds	r24, 0x0563
     57a:	8f 3f       	cpi	r24, 0xFF	; 255
     57c:	19 f0       	breq	.+6      	; 0x584 <OSIntEnter+0x16>
     57e:	8f 5f       	subi	r24, 0xFF	; 255
     580:	80 93 63 05 	sts	0x0563, r24
     584:	08 95       	ret

00000586 <OSSchedLock>:
     586:	80 91 c7 04 	lds	r24, 0x04C7
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	49 f4       	brne	.+18     	; 0x5a0 <OSSchedLock+0x1a>
     58e:	f8 94       	cli
     590:	80 91 c6 04 	lds	r24, 0x04C6
     594:	8f 3f       	cpi	r24, 0xFF	; 255
     596:	19 f0       	breq	.+6      	; 0x59e <OSSchedLock+0x18>
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 93 c6 04 	sts	0x04C6, r24
     59e:	78 94       	sei
     5a0:	08 95       	ret

000005a2 <OSVersion>:
     5a2:	8c ef       	ldi	r24, 0xFC	; 252
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret

000005a8 <OS_Dummy>:
     5a8:	08 95       	ret

000005aa <OSTaskDelReq>:
     5aa:	8f 3f       	cpi	r24, 0xFF	; 255
     5ac:	41 f4       	brne	.+16     	; 0x5be <OSTaskDelReq+0x14>
     5ae:	f8 94       	cli
     5b0:	e0 91 64 05 	lds	r30, 0x0564
     5b4:	f0 91 65 05 	lds	r31, 0x0565
     5b8:	86 85       	ldd	r24, Z+14	; 0x0e
     5ba:	78 94       	sei
     5bc:	08 95       	ret
     5be:	f8 94       	cli
     5c0:	e8 2f       	mov	r30, r24
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	ee 0f       	add	r30, r30
     5c6:	ff 1f       	adc	r31, r31
     5c8:	eb 50       	subi	r30, 0x0B	; 11
     5ca:	f9 4f       	sbci	r31, 0xF9	; 249
     5cc:	01 90       	ld	r0, Z+
     5ce:	f0 81       	ld	r31, Z
     5d0:	e0 2d       	mov	r30, r0
     5d2:	30 97       	sbiw	r30, 0x00	; 0
     5d4:	11 f4       	brne	.+4      	; 0x5da <OSTaskDelReq+0x30>
     5d6:	8b e0       	ldi	r24, 0x0B	; 11
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <OSTaskDelReq+0x36>
     5da:	8e e3       	ldi	r24, 0x3E	; 62
     5dc:	86 87       	std	Z+14, r24	; 0x0e
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	78 94       	sei
     5e2:	08 95       	ret

000005e4 <OS_TCBInit>:
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	18 2f       	mov	r17, r24
     5ec:	f8 94       	cli
     5ee:	c0 91 58 05 	lds	r28, 0x0558
     5f2:	d0 91 59 05 	lds	r29, 0x0559
     5f6:	20 97       	sbiw	r28, 0x00	; 0
     5f8:	09 f4       	brne	.+2      	; 0x5fc <OS_TCBInit+0x18>
     5fa:	50 c0       	rjmp	.+160    	; 0x69c <OS_TCBInit+0xb8>
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	9b 81       	ldd	r25, Y+3	; 0x03
     600:	90 93 59 05 	sts	0x0559, r25
     604:	80 93 58 05 	sts	0x0558, r24
     608:	78 94       	sei
     60a:	79 83       	std	Y+1, r23	; 0x01
     60c:	68 83       	st	Y, r22
     60e:	19 87       	std	Y+9, r17	; 0x09
     610:	18 86       	std	Y+8, r1	; 0x08
     612:	1f 82       	std	Y+7, r1	; 0x07
     614:	1e 82       	std	Y+6, r1	; 0x06
     616:	1e 86       	std	Y+14, r1	; 0x0e
     618:	e1 2f       	mov	r30, r17
     61a:	e6 95       	lsr	r30
     61c:	e6 95       	lsr	r30
     61e:	e6 95       	lsr	r30
     620:	eb 87       	std	Y+11, r30	; 0x0b
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	e0 50       	subi	r30, 0x00	; 0
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	80 81       	ld	r24, Z
     62a:	8d 87       	std	Y+13, r24	; 0x0d
     62c:	e1 2f       	mov	r30, r17
     62e:	e7 70       	andi	r30, 0x07	; 7
     630:	ea 87       	std	Y+10, r30	; 0x0a
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e0 50       	subi	r30, 0x00	; 0
     636:	ff 4f       	sbci	r31, 0xFF	; 255
     638:	80 81       	ld	r24, Z
     63a:	8c 87       	std	Y+12, r24	; 0x0c
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 b6 02 	call	0x56c	; 0x56c <OSTCBInitHook>
     642:	ce 01       	movw	r24, r28
     644:	0e 94 ae 02 	call	0x55c	; 0x55c <OSTaskCreateHook>
     648:	f8 94       	cli
     64a:	e1 2f       	mov	r30, r17
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	eb 50       	subi	r30, 0x0B	; 11
     654:	f9 4f       	sbci	r31, 0xF9	; 249
     656:	d1 83       	std	Z+1, r29	; 0x01
     658:	c0 83       	st	Z, r28
     65a:	e0 91 ce 04 	lds	r30, 0x04CE
     65e:	f0 91 cf 04 	lds	r31, 0x04CF
     662:	fb 83       	std	Y+3, r31	; 0x03
     664:	ea 83       	std	Y+2, r30	; 0x02
     666:	1d 82       	std	Y+5, r1	; 0x05
     668:	1c 82       	std	Y+4, r1	; 0x04
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	11 f0       	breq	.+4      	; 0x672 <OS_TCBInit+0x8e>
     66e:	d5 83       	std	Z+5, r29	; 0x05
     670:	c4 83       	std	Z+4, r28	; 0x04
     672:	d0 93 cf 04 	sts	0x04CF, r29
     676:	c0 93 ce 04 	sts	0x04CE, r28
     67a:	80 91 5e 05 	lds	r24, 0x055E
     67e:	9d 85       	ldd	r25, Y+13	; 0x0d
     680:	89 2b       	or	r24, r25
     682:	80 93 5e 05 	sts	0x055E, r24
     686:	eb 85       	ldd	r30, Y+11	; 0x0b
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	e1 5a       	subi	r30, 0xA1	; 161
     68c:	fa 4f       	sbci	r31, 0xFA	; 250
     68e:	80 81       	ld	r24, Z
     690:	9c 85       	ldd	r25, Y+12	; 0x0c
     692:	89 2b       	or	r24, r25
     694:	80 83       	st	Z, r24
     696:	78 94       	sei
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <OS_TCBInit+0xbc>
     69c:	78 94       	sei
     69e:	86 e4       	ldi	r24, 0x46	; 70
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	08 95       	ret

000006a8 <OS_TaskIdle>:
     6a8:	f8 94       	cli
     6aa:	80 91 c8 04 	lds	r24, 0x04C8
     6ae:	90 91 c9 04 	lds	r25, 0x04C9
     6b2:	a0 91 ca 04 	lds	r26, 0x04CA
     6b6:	b0 91 cb 04 	lds	r27, 0x04CB
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	a1 1d       	adc	r26, r1
     6be:	b1 1d       	adc	r27, r1
     6c0:	80 93 c8 04 	sts	0x04C8, r24
     6c4:	90 93 c9 04 	sts	0x04C9, r25
     6c8:	a0 93 ca 04 	sts	0x04CA, r26
     6cc:	b0 93 cb 04 	sts	0x04CB, r27
     6d0:	78 94       	sei
     6d2:	0e 94 b5 02 	call	0x56a	; 0x56a <OSTaskIdleHook>
     6d6:	e8 cf       	rjmp	.-48     	; 0x6a8 <OS_TaskIdle>

000006d8 <OS_Sched>:
     6d8:	f8 94       	cli
     6da:	80 91 63 05 	lds	r24, 0x0563
     6de:	88 23       	and	r24, r24
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <OS_Sched+0xc>
     6e2:	3f c0       	rjmp	.+126    	; 0x762 <OS_Sched+0x8a>
     6e4:	80 91 c6 04 	lds	r24, 0x04C6
     6e8:	88 23       	and	r24, r24
     6ea:	d9 f5       	brne	.+118    	; 0x762 <OS_Sched+0x8a>
     6ec:	e0 91 5e 05 	lds	r30, 0x055E
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	e8 5f       	subi	r30, 0xF8	; 248
     6f4:	fe 4f       	sbci	r31, 0xFE	; 254
     6f6:	80 81       	ld	r24, Z
     6f8:	e8 2f       	mov	r30, r24
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	e1 5a       	subi	r30, 0xA1	; 161
     6fe:	fa 4f       	sbci	r31, 0xFA	; 250
     700:	e0 81       	ld	r30, Z
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	e8 5f       	subi	r30, 0xF8	; 248
     706:	fe 4f       	sbci	r31, 0xFE	; 254
     708:	98 2f       	mov	r25, r24
     70a:	99 0f       	add	r25, r25
     70c:	99 0f       	add	r25, r25
     70e:	99 0f       	add	r25, r25
     710:	80 81       	ld	r24, Z
     712:	98 0f       	add	r25, r24
     714:	90 93 cc 04 	sts	0x04CC, r25
     718:	80 91 cd 04 	lds	r24, 0x04CD
     71c:	98 17       	cp	r25, r24
     71e:	09 f1       	breq	.+66     	; 0x762 <OS_Sched+0x8a>
     720:	e9 2f       	mov	r30, r25
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	eb 50       	subi	r30, 0x0B	; 11
     72a:	f9 4f       	sbci	r31, 0xF9	; 249
     72c:	80 81       	ld	r24, Z
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	90 93 5d 05 	sts	0x055D, r25
     734:	80 93 5c 05 	sts	0x055C, r24
     738:	80 91 50 05 	lds	r24, 0x0550
     73c:	90 91 51 05 	lds	r25, 0x0551
     740:	a0 91 52 05 	lds	r26, 0x0552
     744:	b0 91 53 05 	lds	r27, 0x0553
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	a1 1d       	adc	r26, r1
     74c:	b1 1d       	adc	r27, r1
     74e:	80 93 50 05 	sts	0x0550, r24
     752:	90 93 51 05 	sts	0x0551, r25
     756:	a0 93 52 05 	sts	0x0552, r26
     75a:	b0 93 53 05 	sts	0x0553, r27
     75e:	0e 94 97 01 	call	0x32e	; 0x32e <OSCtxSw>
     762:	78 94       	sei
     764:	08 95       	ret

00000766 <OSTimeDly>:
     766:	9c 01       	movw	r18, r24
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	21 f1       	breq	.+72     	; 0x7b4 <OSTimeDly+0x4e>
     76c:	f8 94       	cli
     76e:	a0 91 64 05 	lds	r26, 0x0564
     772:	b0 91 65 05 	lds	r27, 0x0565
     776:	1b 96       	adiw	r26, 0x0b	; 11
     778:	ec 91       	ld	r30, X
     77a:	1b 97       	sbiw	r26, 0x0b	; 11
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	e1 5a       	subi	r30, 0xA1	; 161
     780:	fa 4f       	sbci	r31, 0xFA	; 250
     782:	1c 96       	adiw	r26, 0x0c	; 12
     784:	8c 91       	ld	r24, X
     786:	1c 97       	sbiw	r26, 0x0c	; 12
     788:	80 95       	com	r24
     78a:	90 81       	ld	r25, Z
     78c:	89 23       	and	r24, r25
     78e:	80 83       	st	Z, r24
     790:	88 23       	and	r24, r24
     792:	49 f4       	brne	.+18     	; 0x7a6 <OSTimeDly+0x40>
     794:	1d 96       	adiw	r26, 0x0d	; 13
     796:	9c 91       	ld	r25, X
     798:	1d 97       	sbiw	r26, 0x0d	; 13
     79a:	90 95       	com	r25
     79c:	80 91 5e 05 	lds	r24, 0x055E
     7a0:	89 23       	and	r24, r25
     7a2:	80 93 5e 05 	sts	0x055E, r24
     7a6:	17 96       	adiw	r26, 0x07	; 7
     7a8:	3c 93       	st	X, r19
     7aa:	2e 93       	st	-X, r18
     7ac:	16 97       	sbiw	r26, 0x06	; 6
     7ae:	78 94       	sei
     7b0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <OS_Sched>
     7b4:	08 95       	ret

000007b6 <OSTimeDlyHMSM>:
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	88 2e       	mov	r8, r24
     7d0:	16 2f       	mov	r17, r22
     7d2:	94 2e       	mov	r9, r20
     7d4:	88 23       	and	r24, r24
     7d6:	49 f4       	brne	.+18     	; 0x7ea <OSTimeDlyHMSM+0x34>
     7d8:	66 23       	and	r22, r22
     7da:	39 f4       	brne	.+14     	; 0x7ea <OSTimeDlyHMSM+0x34>
     7dc:	44 23       	and	r20, r20
     7de:	49 f4       	brne	.+18     	; 0x7f2 <OSTimeDlyHMSM+0x3c>
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	59 f4       	brne	.+22     	; 0x7fc <OSTimeDlyHMSM+0x46>
     7e6:	84 e5       	ldi	r24, 0x54	; 84
     7e8:	6a c0       	rjmp	.+212    	; 0x8be <OSTimeDlyHMSM+0x108>
     7ea:	1c 33       	cpi	r17, 0x3C	; 60
     7ec:	10 f0       	brcs	.+4      	; 0x7f2 <OSTimeDlyHMSM+0x3c>
     7ee:	81 e5       	ldi	r24, 0x51	; 81
     7f0:	66 c0       	rjmp	.+204    	; 0x8be <OSTimeDlyHMSM+0x108>
     7f2:	8b e3       	ldi	r24, 0x3B	; 59
     7f4:	89 15       	cp	r24, r9
     7f6:	10 f4       	brcc	.+4      	; 0x7fc <OSTimeDlyHMSM+0x46>
     7f8:	82 e5       	ldi	r24, 0x52	; 82
     7fa:	61 c0       	rjmp	.+194    	; 0x8be <OSTimeDlyHMSM+0x108>
     7fc:	93 e0       	ldi	r25, 0x03	; 3
     7fe:	28 3e       	cpi	r18, 0xE8	; 232
     800:	39 07       	cpc	r19, r25
     802:	10 f0       	brcs	.+4      	; 0x808 <OSTimeDlyHMSM+0x52>
     804:	83 e5       	ldi	r24, 0x53	; 83
     806:	5b c0       	rjmp	.+182    	; 0x8be <OSTimeDlyHMSM+0x108>
     808:	b9 01       	movw	r22, r18
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	24 e6       	ldi	r18, 0x64	; 100
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsi3>
     81a:	6c 50       	subi	r22, 0x0C	; 12
     81c:	7e 4f       	sbci	r23, 0xFE	; 254
     81e:	8f 4f       	sbci	r24, 0xFF	; 255
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	28 ee       	ldi	r18, 0xE8	; 232
     824:	33 e0       	ldi	r19, 0x03	; 3
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	0e 94 81 09 	call	0x1302	; 0x1302 <__udivmodsi4>
     82e:	59 01       	movw	r10, r18
     830:	6a 01       	movw	r12, r20
     832:	61 2f       	mov	r22, r17
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	2c e3       	ldi	r18, 0x3C	; 60
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsi3>
     846:	7b 01       	movw	r14, r22
     848:	8c 01       	movw	r16, r24
     84a:	e9 0c       	add	r14, r9
     84c:	f1 1c       	adc	r15, r1
     84e:	01 1d       	adc	r16, r1
     850:	11 1d       	adc	r17, r1
     852:	68 2d       	mov	r22, r8
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	20 e1       	ldi	r18, 0x10	; 16
     85c:	3e e0       	ldi	r19, 0x0E	; 14
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsi3>
     866:	e6 0e       	add	r14, r22
     868:	f7 1e       	adc	r15, r23
     86a:	08 1f       	adc	r16, r24
     86c:	19 1f       	adc	r17, r25
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	24 e6       	ldi	r18, 0x64	; 100
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsi3>
     87e:	a6 0e       	add	r10, r22
     880:	b7 1e       	adc	r11, r23
     882:	c8 1e       	adc	r12, r24
     884:	d9 1e       	adc	r13, r25
     886:	c6 01       	movw	r24, r12
     888:	aa 27       	eor	r26, r26
     88a:	bb 27       	eor	r27, r27
     88c:	ec 01       	movw	r28, r24
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	9f ef       	ldi	r25, 0xFF	; 255
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	a8 22       	and	r10, r24
     898:	b9 22       	and	r11, r25
     89a:	ca 22       	and	r12, r26
     89c:	db 22       	and	r13, r27
     89e:	c5 01       	movw	r24, r10
     8a0:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <OSTimeDlyHMSM+0x102>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e8       	ldi	r25, 0x80	; 128
     8aa:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e8       	ldi	r25, 0x80	; 128
     8b2:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     8b6:	21 97       	sbiw	r28, 0x01	; 1
     8b8:	20 97       	sbiw	r28, 0x00	; 0
     8ba:	a9 f7       	brne	.-22     	; 0x8a6 <OSTimeDlyHMSM+0xf0>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	08 95       	ret

000008d8 <OS_TaskStat>:
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <OS_TaskStat+0x14>
     8e4:	88 ec       	ldi	r24, 0xC8	; 200
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     8ec:	80 91 f4 06 	lds	r24, 0x06F4
     8f0:	88 23       	and	r24, r24
     8f2:	c1 f3       	breq	.-16     	; 0x8e4 <OS_TaskStat+0xc>
     8f4:	60 91 54 05 	lds	r22, 0x0554
     8f8:	70 91 55 05 	lds	r23, 0x0555
     8fc:	80 91 56 05 	lds	r24, 0x0556
     900:	90 91 57 05 	lds	r25, 0x0557
     904:	24 e6       	ldi	r18, 0x64	; 100
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	0e 94 81 09 	call	0x1302	; 0x1302 <__udivmodsi4>
     910:	c9 01       	movw	r24, r18
     912:	da 01       	movw	r26, r20
     914:	7c 01       	movw	r14, r24
     916:	8d 01       	movw	r16, r26
     918:	44 e6       	ldi	r20, 0x64	; 100
     91a:	d4 2e       	mov	r13, r20
     91c:	f8 94       	cli
     91e:	80 91 c8 04 	lds	r24, 0x04C8
     922:	90 91 c9 04 	lds	r25, 0x04C9
     926:	a0 91 ca 04 	lds	r26, 0x04CA
     92a:	b0 91 cb 04 	lds	r27, 0x04CB
     92e:	80 93 17 07 	sts	0x0717, r24
     932:	90 93 18 07 	sts	0x0718, r25
     936:	a0 93 19 07 	sts	0x0719, r26
     93a:	b0 93 1a 07 	sts	0x071A, r27
     93e:	60 91 c8 04 	lds	r22, 0x04C8
     942:	70 91 c9 04 	lds	r23, 0x04C9
     946:	80 91 ca 04 	lds	r24, 0x04CA
     94a:	90 91 cb 04 	lds	r25, 0x04CB
     94e:	10 92 c8 04 	sts	0x04C8, r1
     952:	10 92 c9 04 	sts	0x04C9, r1
     956:	10 92 ca 04 	sts	0x04CA, r1
     95a:	10 92 cb 04 	sts	0x04CB, r1
     95e:	78 94       	sei
     960:	e1 14       	cp	r14, r1
     962:	f1 04       	cpc	r15, r1
     964:	01 05       	cpc	r16, r1
     966:	11 05       	cpc	r17, r1
     968:	71 f0       	breq	.+28     	; 0x986 <__stack+0x87>
     96a:	a8 01       	movw	r20, r16
     96c:	97 01       	movw	r18, r14
     96e:	0e 94 81 09 	call	0x1302	; 0x1302 <__udivmodsi4>
     972:	8d 2d       	mov	r24, r13
     974:	82 1b       	sub	r24, r18
     976:	87 fd       	sbrc	r24, 7
     978:	03 c0       	rjmp	.+6      	; 0x980 <__stack+0x81>
     97a:	80 93 5a 05 	sts	0x055A, r24
     97e:	17 c0       	rjmp	.+46     	; 0x9ae <__stack+0xaf>
     980:	10 92 5a 05 	sts	0x055A, r1
     984:	14 c0       	rjmp	.+40     	; 0x9ae <__stack+0xaf>
     986:	10 92 5a 05 	sts	0x055A, r1
     98a:	60 91 54 05 	lds	r22, 0x0554
     98e:	70 91 55 05 	lds	r23, 0x0555
     992:	80 91 56 05 	lds	r24, 0x0556
     996:	90 91 57 05 	lds	r25, 0x0557
     99a:	24 e6       	ldi	r18, 0x64	; 100
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	0e 94 81 09 	call	0x1302	; 0x1302 <__udivmodsi4>
     9a6:	c9 01       	movw	r24, r18
     9a8:	da 01       	movw	r26, r20
     9aa:	7c 01       	movw	r14, r24
     9ac:	8d 01       	movw	r16, r26
     9ae:	0e 94 b1 02 	call	0x562	; 0x562 <OSTaskStatHook>
     9b2:	84 e6       	ldi	r24, 0x64	; 100
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     9ba:	b0 cf       	rjmp	.-160    	; 0x91c <__stack+0x1d>

000009bc <OSStatInit>:
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     9c4:	f8 94       	cli
     9c6:	10 92 c8 04 	sts	0x04C8, r1
     9ca:	10 92 c9 04 	sts	0x04C9, r1
     9ce:	10 92 ca 04 	sts	0x04CA, r1
     9d2:	10 92 cb 04 	sts	0x04CB, r1
     9d6:	78 94       	sei
     9d8:	84 e6       	ldi	r24, 0x64	; 100
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 b3 03 	call	0x766	; 0x766 <OSTimeDly>
     9e0:	f8 94       	cli
     9e2:	80 91 c8 04 	lds	r24, 0x04C8
     9e6:	90 91 c9 04 	lds	r25, 0x04C9
     9ea:	a0 91 ca 04 	lds	r26, 0x04CA
     9ee:	b0 91 cb 04 	lds	r27, 0x04CB
     9f2:	80 93 54 05 	sts	0x0554, r24
     9f6:	90 93 55 05 	sts	0x0555, r25
     9fa:	a0 93 56 05 	sts	0x0556, r26
     9fe:	b0 93 57 05 	sts	0x0557, r27
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 f4 06 	sts	0x06F4, r24
     a08:	78 94       	sei
     a0a:	08 95       	ret

00000a0c <OSTaskDel>:
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	e8 2f       	mov	r30, r24
     a16:	80 91 63 05 	lds	r24, 0x0563
     a1a:	88 23       	and	r24, r24
     a1c:	11 f0       	breq	.+4      	; 0xa22 <OSTaskDel+0x16>
     a1e:	8f e3       	ldi	r24, 0x3F	; 63
     a20:	6e c0       	rjmp	.+220    	; 0xafe <OSTaskDel+0xf2>
     a22:	f8 94       	cli
     a24:	ef 3f       	cpi	r30, 0xFF	; 255
     a26:	29 f4       	brne	.+10     	; 0xa32 <OSTaskDel+0x26>
     a28:	e0 91 64 05 	lds	r30, 0x0564
     a2c:	f0 91 65 05 	lds	r31, 0x0565
     a30:	e1 85       	ldd	r30, Z+9	; 0x09
     a32:	0e 2f       	mov	r16, r30
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	f8 01       	movw	r30, r16
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	eb 50       	subi	r30, 0x0B	; 11
     a3e:	f9 4f       	sbci	r31, 0xF9	; 249
     a40:	c0 81       	ld	r28, Z
     a42:	d1 81       	ldd	r29, Z+1	; 0x01
     a44:	20 97       	sbiw	r28, 0x00	; 0
     a46:	09 f4       	brne	.+2      	; 0xa4a <OSTaskDel+0x3e>
     a48:	58 c0       	rjmp	.+176    	; 0xafa <OSTaskDel+0xee>
     a4a:	eb 85       	ldd	r30, Y+11	; 0x0b
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	e1 5a       	subi	r30, 0xA1	; 161
     a50:	fa 4f       	sbci	r31, 0xFA	; 250
     a52:	8c 85       	ldd	r24, Y+12	; 0x0c
     a54:	80 95       	com	r24
     a56:	90 81       	ld	r25, Z
     a58:	89 23       	and	r24, r25
     a5a:	80 83       	st	Z, r24
     a5c:	88 23       	and	r24, r24
     a5e:	39 f4       	brne	.+14     	; 0xa6e <OSTaskDel+0x62>
     a60:	9d 85       	ldd	r25, Y+13	; 0x0d
     a62:	90 95       	com	r25
     a64:	80 91 5e 05 	lds	r24, 0x055E
     a68:	89 23       	and	r24, r25
     a6a:	80 93 5e 05 	sts	0x055E, r24
     a6e:	1f 82       	std	Y+7, r1	; 0x07
     a70:	1e 82       	std	Y+6, r1	; 0x06
     a72:	18 86       	std	Y+8, r1	; 0x08
     a74:	80 91 c6 04 	lds	r24, 0x04C6
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	19 f0       	breq	.+6      	; 0xa82 <OSTaskDel+0x76>
     a7c:	8f 5f       	subi	r24, 0xFF	; 255
     a7e:	80 93 c6 04 	sts	0x04C6, r24
     a82:	78 94       	sei
     a84:	f8 94       	cli
     a86:	80 91 c6 04 	lds	r24, 0x04C6
     a8a:	88 23       	and	r24, r24
     a8c:	19 f0       	breq	.+6      	; 0xa94 <OSTaskDel+0x88>
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	80 93 c6 04 	sts	0x04C6, r24
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 af 02 	call	0x55e	; 0x55e <OSTaskDelHook>
     a9a:	80 91 5b 05 	lds	r24, 0x055B
     a9e:	81 50       	subi	r24, 0x01	; 1
     aa0:	80 93 5b 05 	sts	0x055B, r24
     aa4:	00 0f       	add	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0b 50       	subi	r16, 0x0B	; 11
     aaa:	19 4f       	sbci	r17, 0xF9	; 249
     aac:	f8 01       	movw	r30, r16
     aae:	11 82       	std	Z+1, r1	; 0x01
     ab0:	10 82       	st	Z, r1
     ab2:	ac 81       	ldd	r26, Y+4	; 0x04
     ab4:	bd 81       	ldd	r27, Y+5	; 0x05
     ab6:	ea 81       	ldd	r30, Y+2	; 0x02
     ab8:	fb 81       	ldd	r31, Y+3	; 0x03
     aba:	10 97       	sbiw	r26, 0x00	; 0
     abc:	39 f4       	brne	.+14     	; 0xacc <OSTaskDel+0xc0>
     abe:	15 82       	std	Z+5, r1	; 0x05
     ac0:	14 82       	std	Z+4, r1	; 0x04
     ac2:	f0 93 cf 04 	sts	0x04CF, r31
     ac6:	e0 93 ce 04 	sts	0x04CE, r30
     aca:	08 c0       	rjmp	.+16     	; 0xadc <OSTaskDel+0xd0>
     acc:	13 96       	adiw	r26, 0x03	; 3
     ace:	fc 93       	st	X, r31
     ad0:	ee 93       	st	-X, r30
     ad2:	12 97       	sbiw	r26, 0x02	; 2
     ad4:	ea 81       	ldd	r30, Y+2	; 0x02
     ad6:	fb 81       	ldd	r31, Y+3	; 0x03
     ad8:	b5 83       	std	Z+5, r27	; 0x05
     ada:	a4 83       	std	Z+4, r26	; 0x04
     adc:	80 91 58 05 	lds	r24, 0x0558
     ae0:	90 91 59 05 	lds	r25, 0x0559
     ae4:	9b 83       	std	Y+3, r25	; 0x03
     ae6:	8a 83       	std	Y+2, r24	; 0x02
     ae8:	d0 93 59 05 	sts	0x0559, r29
     aec:	c0 93 58 05 	sts	0x0558, r28
     af0:	78 94       	sei
     af2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <OS_Sched>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	02 c0       	rjmp	.+4      	; 0xafe <OSTaskDel+0xf2>
     afa:	78 94       	sei
     afc:	8c e3       	ldi	r24, 0x3C	; 60
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <OSTaskCreate>:
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	fc 01       	movw	r30, r24
     b1e:	12 2f       	mov	r17, r18
     b20:	f8 94       	cli
     b22:	c2 2f       	mov	r28, r18
     b24:	d0 e0       	ldi	r29, 0x00	; 0
     b26:	cc 0f       	add	r28, r28
     b28:	dd 1f       	adc	r29, r29
     b2a:	cb 50       	subi	r28, 0x0B	; 11
     b2c:	d9 4f       	sbci	r29, 0xF9	; 249
     b2e:	88 81       	ld	r24, Y
     b30:	99 81       	ldd	r25, Y+1	; 0x01
     b32:	89 2b       	or	r24, r25
     b34:	79 f5       	brne	.+94     	; 0xb94 <OSTaskCreate+0x8c>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	99 83       	std	Y+1, r25	; 0x01
     b3c:	88 83       	st	Y, r24
     b3e:	78 94       	sei
     b40:	cf 01       	movw	r24, r30
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	0e 94 86 02 	call	0x50c	; 0x50c <OSTaskStkInit>
     b4a:	bc 01       	movw	r22, r24
     b4c:	81 2f       	mov	r24, r17
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	ee 24       	eor	r14, r14
     b58:	ff 24       	eor	r15, r15
     b5a:	87 01       	movw	r16, r14
     b5c:	cc 24       	eor	r12, r12
     b5e:	dd 24       	eor	r13, r13
     b60:	aa 24       	eor	r10, r10
     b62:	bb 24       	eor	r11, r11
     b64:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OS_TCBInit>
     b68:	18 2f       	mov	r17, r24
     b6a:	88 23       	and	r24, r24
     b6c:	71 f4       	brne	.+28     	; 0xb8a <OSTaskCreate+0x82>
     b6e:	f8 94       	cli
     b70:	80 91 5b 05 	lds	r24, 0x055B
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	80 93 5b 05 	sts	0x055B, r24
     b7a:	78 94       	sei
     b7c:	80 91 c7 04 	lds	r24, 0x04C7
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	51 f4       	brne	.+20     	; 0xb98 <OSTaskCreate+0x90>
     b84:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <OS_Sched>
     b88:	07 c0       	rjmp	.+14     	; 0xb98 <OSTaskCreate+0x90>
     b8a:	f8 94       	cli
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	18 82       	st	Y, r1
     b90:	78 94       	sei
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <OSTaskCreate+0x90>
     b94:	78 94       	sei
     b96:	18 e2       	ldi	r17, 0x28	; 40
     b98:	81 2f       	mov	r24, r17
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	bf 90       	pop	r11
     bac:	af 90       	pop	r10
     bae:	08 95       	ret

00000bb0 <OSSchedUnlock>:
     bb0:	80 91 c7 04 	lds	r24, 0x04C7
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	a9 f4       	brne	.+42     	; 0xbe2 <OSSchedUnlock+0x32>
     bb8:	f8 94       	cli
     bba:	80 91 c6 04 	lds	r24, 0x04C6
     bbe:	88 23       	and	r24, r24
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <OSSchedUnlock+0x30>
     bc2:	81 50       	subi	r24, 0x01	; 1
     bc4:	80 93 c6 04 	sts	0x04C6, r24
     bc8:	88 23       	and	r24, r24
     bca:	41 f4       	brne	.+16     	; 0xbdc <OSSchedUnlock+0x2c>
     bcc:	80 91 63 05 	lds	r24, 0x0563
     bd0:	88 23       	and	r24, r24
     bd2:	21 f4       	brne	.+8      	; 0xbdc <OSSchedUnlock+0x2c>
     bd4:	78 94       	sei
     bd6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <OS_Sched>
     bda:	08 95       	ret
     bdc:	78 94       	sei
     bde:	08 95       	ret
     be0:	78 94       	sei
     be2:	08 95       	ret

00000be4 <OSTimeTick>:
     be4:	0e 94 b2 02 	call	0x564	; 0x564 <OSTimeTickHook>
     be8:	80 91 c7 04 	lds	r24, 0x04C7
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <OSTimeTick+0xe>
     bf0:	3d c0       	rjmp	.+122    	; 0xc6c <OSTimeTick+0x88>
     bf2:	a0 91 ce 04 	lds	r26, 0x04CE
     bf6:	b0 91 cf 04 	lds	r27, 0x04CF
     bfa:	20 91 5e 05 	lds	r18, 0x055E
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2d c0       	rjmp	.+90     	; 0xc5e <OSTimeTick+0x7a>
     c04:	f8 94       	cli
     c06:	16 96       	adiw	r26, 0x06	; 6
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	17 97       	sbiw	r26, 0x07	; 7
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	09 f1       	breq	.+66     	; 0xc54 <OSTimeTick+0x70>
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	17 96       	adiw	r26, 0x07	; 7
     c16:	9c 93       	st	X, r25
     c18:	8e 93       	st	-X, r24
     c1a:	16 97       	sbiw	r26, 0x06	; 6
     c1c:	89 2b       	or	r24, r25
     c1e:	d1 f4       	brne	.+52     	; 0xc54 <OSTimeTick+0x70>
     c20:	18 96       	adiw	r26, 0x08	; 8
     c22:	8c 91       	ld	r24, X
     c24:	18 97       	sbiw	r26, 0x08	; 8
     c26:	83 fd       	sbrc	r24, 3
     c28:	11 c0       	rjmp	.+34     	; 0xc4c <OSTimeTick+0x68>
     c2a:	1d 96       	adiw	r26, 0x0d	; 13
     c2c:	8c 91       	ld	r24, X
     c2e:	1d 97       	sbiw	r26, 0x0d	; 13
     c30:	28 2b       	or	r18, r24
     c32:	1b 96       	adiw	r26, 0x0b	; 11
     c34:	ec 91       	ld	r30, X
     c36:	1b 97       	sbiw	r26, 0x0b	; 11
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	e1 5a       	subi	r30, 0xA1	; 161
     c3c:	fa 4f       	sbci	r31, 0xFA	; 250
     c3e:	80 81       	ld	r24, Z
     c40:	1c 96       	adiw	r26, 0x0c	; 12
     c42:	9c 91       	ld	r25, X
     c44:	1c 97       	sbiw	r26, 0x0c	; 12
     c46:	89 2b       	or	r24, r25
     c48:	80 83       	st	Z, r24
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <OSTimeTick+0x70>
     c4c:	17 96       	adiw	r26, 0x07	; 7
     c4e:	5c 93       	st	X, r21
     c50:	4e 93       	st	-X, r20
     c52:	16 97       	sbiw	r26, 0x06	; 6
     c54:	12 96       	adiw	r26, 0x02	; 2
     c56:	0d 90       	ld	r0, X+
     c58:	bc 91       	ld	r27, X
     c5a:	a0 2d       	mov	r26, r0
     c5c:	78 94       	sei
     c5e:	19 96       	adiw	r26, 0x09	; 9
     c60:	8c 91       	ld	r24, X
     c62:	19 97       	sbiw	r26, 0x09	; 9
     c64:	80 31       	cpi	r24, 0x10	; 16
     c66:	71 f6       	brne	.-100    	; 0xc04 <OSTimeTick+0x20>
     c68:	20 93 5e 05 	sts	0x055E, r18
     c6c:	08 95       	ret

00000c6e <OSStart>:
     c6e:	80 91 c7 04 	lds	r24, 0x04C7
     c72:	88 23       	and	r24, r24
     c74:	41 f5       	brne	.+80     	; 0xcc6 <OSStart+0x58>
     c76:	e0 91 5e 05 	lds	r30, 0x055E
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e8 5f       	subi	r30, 0xF8	; 248
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	a0 81       	ld	r26, Z
     c82:	ea 2f       	mov	r30, r26
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	e1 5a       	subi	r30, 0xA1	; 161
     c88:	fa 4f       	sbci	r31, 0xFA	; 250
     c8a:	e0 81       	ld	r30, Z
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	e8 5f       	subi	r30, 0xF8	; 248
     c90:	fe 4f       	sbci	r31, 0xFE	; 254
     c92:	aa 0f       	add	r26, r26
     c94:	aa 0f       	add	r26, r26
     c96:	aa 0f       	add	r26, r26
     c98:	80 81       	ld	r24, Z
     c9a:	a8 0f       	add	r26, r24
     c9c:	a0 93 cc 04 	sts	0x04CC, r26
     ca0:	a0 93 cd 04 	sts	0x04CD, r26
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	aa 0f       	add	r26, r26
     ca8:	bb 1f       	adc	r27, r27
     caa:	ab 50       	subi	r26, 0x0B	; 11
     cac:	b9 4f       	sbci	r27, 0xF9	; 249
     cae:	8d 91       	ld	r24, X+
     cb0:	9c 91       	ld	r25, X
     cb2:	90 93 5d 05 	sts	0x055D, r25
     cb6:	80 93 5c 05 	sts	0x055C, r24
     cba:	90 93 65 05 	sts	0x0565, r25
     cbe:	80 93 64 05 	sts	0x0564, r24
     cc2:	0e 94 67 01 	call	0x2ce	; 0x2ce <OSStartHighRdy>
     cc6:	08 95       	ret

00000cc8 <OSIntExit>:
     cc8:	80 91 c7 04 	lds	r24, 0x04C7
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <OSIntExit+0xa>
     cd0:	4f c0       	rjmp	.+158    	; 0xd70 <OSIntExit+0xa8>
     cd2:	f8 94       	cli
     cd4:	80 91 63 05 	lds	r24, 0x0563
     cd8:	88 23       	and	r24, r24
     cda:	19 f0       	breq	.+6      	; 0xce2 <OSIntExit+0x1a>
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	80 93 63 05 	sts	0x0563, r24
     ce2:	80 91 63 05 	lds	r24, 0x0563
     ce6:	88 23       	and	r24, r24
     ce8:	09 f0       	breq	.+2      	; 0xcec <OSIntExit+0x24>
     cea:	41 c0       	rjmp	.+130    	; 0xd6e <OSIntExit+0xa6>
     cec:	80 91 c6 04 	lds	r24, 0x04C6
     cf0:	88 23       	and	r24, r24
     cf2:	e9 f5       	brne	.+122    	; 0xd6e <OSIntExit+0xa6>
     cf4:	e0 91 5e 05 	lds	r30, 0x055E
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e8 5f       	subi	r30, 0xF8	; 248
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	80 81       	ld	r24, Z
     d00:	80 93 62 05 	sts	0x0562, r24
     d04:	e8 2f       	mov	r30, r24
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	e1 5a       	subi	r30, 0xA1	; 161
     d0a:	fa 4f       	sbci	r31, 0xFA	; 250
     d0c:	e0 81       	ld	r30, Z
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e8 5f       	subi	r30, 0xF8	; 248
     d12:	fe 4f       	sbci	r31, 0xFE	; 254
     d14:	98 2f       	mov	r25, r24
     d16:	99 0f       	add	r25, r25
     d18:	99 0f       	add	r25, r25
     d1a:	99 0f       	add	r25, r25
     d1c:	80 81       	ld	r24, Z
     d1e:	98 0f       	add	r25, r24
     d20:	90 93 cc 04 	sts	0x04CC, r25
     d24:	80 91 cd 04 	lds	r24, 0x04CD
     d28:	98 17       	cp	r25, r24
     d2a:	09 f1       	breq	.+66     	; 0xd6e <OSIntExit+0xa6>
     d2c:	e9 2f       	mov	r30, r25
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	eb 50       	subi	r30, 0x0B	; 11
     d36:	f9 4f       	sbci	r31, 0xF9	; 249
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	90 93 5d 05 	sts	0x055D, r25
     d40:	80 93 5c 05 	sts	0x055C, r24
     d44:	80 91 50 05 	lds	r24, 0x0550
     d48:	90 91 51 05 	lds	r25, 0x0551
     d4c:	a0 91 52 05 	lds	r26, 0x0552
     d50:	b0 91 53 05 	lds	r27, 0x0553
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	a1 1d       	adc	r26, r1
     d58:	b1 1d       	adc	r27, r1
     d5a:	80 93 50 05 	sts	0x0550, r24
     d5e:	90 93 51 05 	sts	0x0551, r25
     d62:	a0 93 52 05 	sts	0x0552, r26
     d66:	b0 93 53 05 	sts	0x0553, r27
     d6a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <OSIntCtxSw>
     d6e:	78 94       	sei
     d70:	08 95       	ret

00000d72 <OSInit>:
     d72:	0e 94 b3 02 	call	0x566	; 0x566 <OSInitHookBegin>
     d76:	10 92 63 05 	sts	0x0563, r1
     d7a:	10 92 c6 04 	sts	0x04C6, r1
     d7e:	10 92 5b 05 	sts	0x055B, r1
     d82:	10 92 c7 04 	sts	0x04C7, r1
     d86:	10 92 50 05 	sts	0x0550, r1
     d8a:	10 92 51 05 	sts	0x0551, r1
     d8e:	10 92 52 05 	sts	0x0552, r1
     d92:	10 92 53 05 	sts	0x0553, r1
     d96:	10 92 c8 04 	sts	0x04C8, r1
     d9a:	10 92 c9 04 	sts	0x04C9, r1
     d9e:	10 92 ca 04 	sts	0x04CA, r1
     da2:	10 92 cb 04 	sts	0x04CB, r1
     da6:	10 92 5e 05 	sts	0x055E, r1
     daa:	10 92 5f 05 	sts	0x055F, r1
     dae:	10 92 60 05 	sts	0x0560, r1
     db2:	10 92 61 05 	sts	0x0561, r1
     db6:	10 92 cd 04 	sts	0x04CD, r1
     dba:	10 92 cc 04 	sts	0x04CC, r1
     dbe:	10 92 5d 05 	sts	0x055D, r1
     dc2:	10 92 5c 05 	sts	0x055C, r1
     dc6:	10 92 65 05 	sts	0x0565, r1
     dca:	10 92 64 05 	sts	0x0564, r1
     dce:	10 92 cf 04 	sts	0x04CF, r1
     dd2:	10 92 ce 04 	sts	0x04CE, r1
     dd6:	e5 ef       	ldi	r30, 0xF5	; 245
     dd8:	f6 e0       	ldi	r31, 0x06	; 6
     dda:	11 92       	st	Z+, r1
     ddc:	11 92       	st	Z+, r1
     dde:	27 e0       	ldi	r18, 0x07	; 7
     de0:	e7 31       	cpi	r30, 0x17	; 23
     de2:	f2 07       	cpc	r31, r18
     de4:	d1 f7       	brne	.-12     	; 0xdda <OSInit+0x68>
     de6:	85 ef       	ldi	r24, 0xF5	; 245
     de8:	95 e0       	ldi	r25, 0x05	; 5
     dea:	fc 01       	movw	r30, r24
     dec:	3d 97       	sbiw	r30, 0x0d	; 13
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	0f 96       	adiw	r24, 0x0f	; 15
     df4:	26 e0       	ldi	r18, 0x06	; 6
     df6:	84 3f       	cpi	r24, 0xF4	; 244
     df8:	92 07       	cpc	r25, r18
     dfa:	b9 f7       	brne	.-18     	; 0xdea <OSInit+0x78>
     dfc:	10 92 e8 06 	sts	0x06E8, r1
     e00:	10 92 e7 06 	sts	0x06E7, r1
     e04:	86 ee       	ldi	r24, 0xE6	; 230
     e06:	95 e0       	ldi	r25, 0x05	; 5
     e08:	90 93 59 05 	sts	0x0559, r25
     e0c:	80 93 58 05 	sts	0x0558, r24
     e10:	84 e5       	ldi	r24, 0x54	; 84
     e12:	93 e0       	ldi	r25, 0x03	; 3
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	45 ee       	ldi	r20, 0xE5	; 229
     e1a:	55 e0       	ldi	r21, 0x05	; 5
     e1c:	20 e1       	ldi	r18, 0x10	; 16
     e1e:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
     e22:	8c e6       	ldi	r24, 0x6C	; 108
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	4f e4       	ldi	r20, 0x4F	; 79
     e2c:	55 e0       	ldi	r21, 0x05	; 5
     e2e:	2f e0       	ldi	r18, 0x0F	; 15
     e30:	0e 94 84 05 	call	0xb08	; 0xb08 <OSTaskCreate>
     e34:	0e 94 b4 02 	call	0x568	; 0x568 <OSInitHookEnd>
     e38:	08 95       	ret

00000e3a <ADC_init>:
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	80 93 7c 00 	sts	0x007C, r24
     e40:	86 e8       	ldi	r24, 0x86	; 134
     e42:	80 93 7a 00 	sts	0x007A, r24
     e46:	08 95       	ret

00000e48 <ADC_read>:
     e48:	80 64       	ori	r24, 0x40	; 64
     e4a:	80 93 7c 00 	sts	0x007C, r24
     e4e:	80 91 7a 00 	lds	r24, 0x007A
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	80 93 7a 00 	sts	0x007A, r24
     e58:	80 91 7a 00 	lds	r24, 0x007A
     e5c:	84 ff       	sbrs	r24, 4
     e5e:	fc cf       	rjmp	.-8      	; 0xe58 <ADC_read+0x10>
     e60:	80 91 7a 00 	lds	r24, 0x007A
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 93 7a 00 	sts	0x007A, r24
     e6a:	80 91 78 00 	lds	r24, 0x0078
     e6e:	90 91 79 00 	lds	r25, 0x0079
     e72:	93 70       	andi	r25, 0x03	; 3
     e74:	08 95       	ret

00000e76 <ADC_readmv>:
     e76:	0e 94 24 07 	call	0xe48	; 0xe48 <ADC_read>
     e7a:	27 e2       	ldi	r18, 0x27	; 39
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	ac 01       	movw	r20, r24
     e80:	42 9f       	mul	r20, r18
     e82:	c0 01       	movw	r24, r0
     e84:	43 9f       	mul	r20, r19
     e86:	90 0d       	add	r25, r0
     e88:	52 9f       	mul	r21, r18
     e8a:	90 0d       	add	r25, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	23 e0       	ldi	r18, 0x03	; 3
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	2a 95       	dec	r18
     e96:	e1 f7       	brne	.-8      	; 0xe90 <ADC_readmv+0x1a>
     e98:	08 95       	ret

00000e9a <PWM8_write>:
     e9a:	88 23       	and	r24, r24
     e9c:	29 f4       	brne	.+10     	; 0xea8 <PWM8_write+0xe>
     e9e:	70 93 89 00 	sts	0x0089, r23
     ea2:	60 93 88 00 	sts	0x0088, r22
     ea6:	08 95       	ret
     ea8:	70 93 8b 00 	sts	0x008B, r23
     eac:	60 93 8a 00 	sts	0x008A, r22
     eb0:	08 95       	ret

00000eb2 <motor_init>:
     eb2:	8a b1       	in	r24, 0x0a	; 10
     eb4:	80 6f       	ori	r24, 0xF0	; 240
     eb6:	8a b9       	out	0x0a, r24	; 10
     eb8:	8b b1       	in	r24, 0x0b	; 11
     eba:	8f 70       	andi	r24, 0x0F	; 15
     ebc:	8b b9       	out	0x0b, r24	; 11
     ebe:	81 ea       	ldi	r24, 0xA1	; 161
     ec0:	80 93 80 00 	sts	0x0080, r24
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	80 93 81 00 	sts	0x0081, r24
     eca:	10 92 85 00 	sts	0x0085, r1
     ece:	10 92 84 00 	sts	0x0084, r1
     ed2:	10 92 89 00 	sts	0x0089, r1
     ed6:	10 92 88 00 	sts	0x0088, r1
     eda:	10 92 8b 00 	sts	0x008B, r1
     ede:	10 92 8a 00 	sts	0x008A, r1
     ee2:	84 b1       	in	r24, 0x04	; 4
     ee4:	86 60       	ori	r24, 0x06	; 6
     ee6:	84 b9       	out	0x04, r24	; 4
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	0e 94 4d 07 	call	0xe9a	; 0xe9a <PWM8_write>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <PWM8_write>
     efc:	08 95       	ret

00000efe <motor_set_dir>:
     efe:	88 23       	and	r24, r24
     f00:	41 f4       	brne	.+16     	; 0xf12 <motor_set_dir+0x14>
     f02:	66 23       	and	r22, r22
     f04:	19 f4       	brne	.+6      	; 0xf0c <motor_set_dir+0xe>
     f06:	5e 98       	cbi	0x0b, 6	; 11
     f08:	5f 9a       	sbi	0x0b, 7	; 11
     f0a:	08 95       	ret
     f0c:	5e 9a       	sbi	0x0b, 6	; 11
     f0e:	5f 98       	cbi	0x0b, 7	; 11
     f10:	08 95       	ret
     f12:	66 23       	and	r22, r22
     f14:	19 f4       	brne	.+6      	; 0xf1c <motor_set_dir+0x1e>
     f16:	5c 9a       	sbi	0x0b, 4	; 11
     f18:	5d 98       	cbi	0x0b, 5	; 11
     f1a:	08 95       	ret
     f1c:	5c 98       	cbi	0x0b, 4	; 11
     f1e:	5d 9a       	sbi	0x0b, 5	; 11
     f20:	08 95       	ret

00000f22 <motor_set_speed>:
     f22:	65 36       	cpi	r22, 0x65	; 101
     f24:	71 05       	cpc	r23, r1
     f26:	14 f0       	brlt	.+4      	; 0xf2c <motor_set_speed+0xa>
     f28:	64 e6       	ldi	r22, 0x64	; 100
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	9b 01       	movw	r18, r22
     f2e:	35 95       	asr	r19
     f30:	27 95       	ror	r18
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	26 0f       	add	r18, r22
     f38:	37 1f       	adc	r19, r23
     f3a:	88 23       	and	r24, r24
     f3c:	11 f4       	brne	.+4      	; 0xf42 <motor_set_speed+0x20>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <motor_set_speed+0x22>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	b9 01       	movw	r22, r18
     f46:	0e 94 4d 07 	call	0xe9a	; 0xe9a <PWM8_write>
     f4a:	08 95       	ret

00000f4c <robo_motorSpeed>:
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	8c 01       	movw	r16, r24
     f56:	eb 01       	movw	r28, r22
     f58:	97 ff       	sbrs	r25, 7
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <robo_motorSpeed+0x20>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
     f64:	10 95       	com	r17
     f66:	01 95       	neg	r16
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <robo_motorSpeed+0x28>
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
     f74:	d7 ff       	sbrs	r29, 7
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <robo_motorSpeed+0x3c>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
     f80:	d0 95       	com	r29
     f82:	c1 95       	neg	r28
     f84:	df 4f       	sbci	r29, 0xFF	; 255
     f86:	04 c0       	rjmp	.+8      	; 0xf90 <robo_motorSpeed+0x44>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	be 01       	movw	r22, r28
     f94:	0e 94 91 07 	call	0xf22	; 0xf22 <motor_set_speed>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	b8 01       	movw	r22, r16
     f9c:	0e 94 91 07 	call	0xf22	; 0xf22 <motor_set_speed>
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <USART0_init>:
     faa:	80 93 c4 00 	sts	0x00C4, r24
     fae:	10 92 c5 00 	sts	0x00C5, r1
     fb2:	10 92 c0 00 	sts	0x00C0, r1
     fb6:	88 e1       	ldi	r24, 0x18	; 24
     fb8:	80 93 c1 00 	sts	0x00C1, r24
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	80 93 c2 00 	sts	0x00C2, r24
     fc2:	08 95       	ret

00000fc4 <cputchar>:
     fc4:	98 2f       	mov	r25, r24
     fc6:	80 91 c0 00 	lds	r24, 0x00C0
     fca:	85 ff       	sbrs	r24, 5
     fcc:	fc cf       	rjmp	.-8      	; 0xfc6 <cputchar+0x2>
     fce:	90 93 c6 00 	sts	0x00C6, r25
     fd2:	08 95       	ret

00000fd4 <cgetchar>:
     fd4:	1f 93       	push	r17
     fd6:	80 91 c0 00 	lds	r24, 0x00C0
     fda:	87 ff       	sbrs	r24, 7
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <cgetchar+0x2>
     fde:	10 91 c6 00 	lds	r17, 0x00C6
     fe2:	81 2f       	mov	r24, r17
     fe4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
     fe8:	81 2f       	mov	r24, r17
     fea:	1f 91       	pop	r17
     fec:	08 95       	ret

00000fee <cputs>:
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <cputs+0xe>
     ff6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
     ffa:	21 96       	adiw	r28, 0x01	; 1
     ffc:	88 81       	ld	r24, Y
     ffe:	88 23       	and	r24, r24
    1000:	d1 f7       	brne	.-12     	; 0xff6 <cputs+0x8>
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <robo_distSensor>:
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	0e 94 3b 07 	call	0xe76	; 0xe76 <ADC_readmv>
    1012:	8c 01       	movw	r16, r24
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	0e 94 3b 07 	call	0xe76	; 0xe76 <ADC_readmv>
    101a:	80 0f       	add	r24, r16
    101c:	91 1f       	adc	r25, r17
    101e:	64 e1       	ldi	r22, 0x14	; 20
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__divmodhi4>
    1026:	e8 e0       	ldi	r30, 0x08	; 8
    1028:	f2 e0       	ldi	r31, 0x02	; 2
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	68 17       	cp	r22, r24
    1032:	79 07       	cpc	r23, r25
    1034:	28 f0       	brcs	.+10     	; 0x1040 <robo_distSensor+0x38>
    1036:	82 2f       	mov	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	8c 5f       	subi	r24, 0xFC	; 252
    103c:	41 f4       	brne	.+16     	; 0x104e <robo_distSensor+0x46>
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <robo_distSensor+0x40>
    1040:	2f 5f       	subi	r18, 0xFF	; 255
    1042:	32 96       	adiw	r30, 0x02	; 2
    1044:	23 31       	cpi	r18, 0x13	; 19
    1046:	91 f7       	brne	.-28     	; 0x102c <robo_distSensor+0x24>
    1048:	82 2f       	mov	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	8e 5f       	subi	r24, 0xFE	; 254
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	08 95       	ret

00001056 <robo_lightSensorR>:
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 24 07 	call	0xe48	; 0xe48 <ADC_read>
    105c:	08 95       	ret

0000105e <robo_lightSensorL>:
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 24 07 	call	0xe48	; 0xe48 <ADC_read>
    1064:	08 95       	ret

00001066 <robo_bumpSensorR>:
    1066:	83 b1       	in	r24, 0x03	; 3
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	64 e0       	ldi	r22, 0x04	; 4
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	6a 95       	dec	r22
    1072:	e1 f7       	brne	.-8      	; 0x106c <robo_bumpSensorR+0x6>
    1074:	80 95       	com	r24
    1076:	90 95       	com	r25
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	08 95       	ret

0000107e <robo_bumpSensorL>:
    107e:	83 b1       	in	r24, 0x03	; 3
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	73 e0       	ldi	r23, 0x03	; 3
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	7a 95       	dec	r23
    108a:	e1 f7       	brne	.-8      	; 0x1084 <robo_bumpSensorL+0x6>
    108c:	80 95       	com	r24
    108e:	90 95       	com	r25
    1090:	81 70       	andi	r24, 0x01	; 1
    1092:	90 70       	andi	r25, 0x00	; 0
    1094:	08 95       	ret

00001096 <robo_Honk>:
    1096:	5b 9a       	sbi	0x0b, 3	; 11
    1098:	88 eb       	ldi	r24, 0xB8	; 184
    109a:	9b e0       	ldi	r25, 0x0B	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    109c:	e0 e9       	ldi	r30, 0x90	; 144
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	31 97       	sbiw	r30, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <robo_Honk+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a6:	d1 f7       	brne	.-12     	; 0x109c <robo_Honk+0x6>
    10a8:	5b 98       	cbi	0x0b, 3	; 11
    10aa:	88 eb       	ldi	r24, 0xB8	; 184
    10ac:	9b e0       	ldi	r25, 0x0B	; 11
    10ae:	e0 e9       	ldi	r30, 0x90	; 144
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	31 97       	sbiw	r30, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <robo_Honk+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b8:	d1 f7       	brne	.-12     	; 0x10ae <robo_Honk+0x18>
    10ba:	08 95       	ret

000010bc <robo_checkBattery>:
    10bc:	85 e0       	ldi	r24, 0x05	; 5
    10be:	0e 94 24 07 	call	0xe48	; 0xe48 <ADC_read>
    10c2:	84 5f       	subi	r24, 0xF4	; 244
    10c4:	91 40       	sbci	r25, 0x01	; 1
    10c6:	10 f4       	brcc	.+4      	; 0x10cc <robo_checkBattery+0x10>
    10c8:	28 9a       	sbi	0x05, 0	; 5
    10ca:	08 95       	ret
    10cc:	28 98       	cbi	0x05, 0	; 5
    10ce:	08 95       	ret

000010d0 <robo_goPressed>:
    10d0:	89 b1       	in	r24, 0x09	; 9
    10d2:	86 95       	lsr	r24
    10d4:	86 95       	lsr	r24
    10d6:	80 95       	com	r24
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	08 95       	ret

000010dc <robo_wait4goPress>:
    10dc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <robo_goPressed>
    10e0:	88 23       	and	r24, r24
    10e2:	e1 f3       	breq	.-8      	; 0x10dc <robo_wait4goPress>
    10e4:	08 95       	ret

000010e6 <OS_ticks_init>:
    10e6:	f8 94       	cli
    10e8:	85 e0       	ldi	r24, 0x05	; 5
    10ea:	85 bd       	out	0x25, r24	; 37
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 6e 00 	sts	0x006E, r24
    10f2:	84 e6       	ldi	r24, 0x64	; 100
    10f4:	86 bd       	out	0x26, r24	; 38
    10f6:	78 94       	sei
    10f8:	08 95       	ret

000010fa <HAL_init>:
    10fa:	87 e6       	ldi	r24, 0x67	; 103
    10fc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <USART0_init>
    1100:	0e 94 1d 07 	call	0xe3a	; 0xe3a <ADC_init>
    1104:	08 95       	ret

00001106 <robo_Setup>:
    1106:	0e 94 7d 08 	call	0x10fa	; 0x10fa <HAL_init>
    110a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <motor_init>
    110e:	53 9a       	sbi	0x0a, 3	; 10
    1110:	5b 98       	cbi	0x0b, 3	; 11
    1112:	20 9a       	sbi	0x04, 0	; 4
    1114:	52 98       	cbi	0x0a, 2	; 10
    1116:	5a 9a       	sbi	0x0b, 2	; 11
    1118:	24 98       	cbi	0x04, 4	; 4
    111a:	23 98       	cbi	0x04, 3	; 4
    111c:	85 b1       	in	r24, 0x05	; 5
    111e:	88 61       	ori	r24, 0x18	; 24
    1120:	85 b9       	out	0x05, r24	; 5
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	0e 94 7f 07 	call	0xefe	; 0xefe <motor_set_dir>
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <robo_motorSpeed>
    113e:	08 95       	ret

00001140 <cprintf>:
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	1f e0       	ldi	r17, 0x0F	; 15
    115e:	e1 2e       	mov	r14, r17
    1160:	f1 2c       	mov	r15, r1
    1162:	ec 0e       	add	r14, r28
    1164:	fd 1e       	adc	r15, r29
    1166:	f7 01       	movw	r30, r14
    1168:	a1 90       	ld	r10, Z+
    116a:	b1 90       	ld	r11, Z+
    116c:	7f 01       	movw	r14, r30
    116e:	13 c0       	rjmp	.+38     	; 0x1196 <cprintf+0x56>
    1170:	88 23       	and	r24, r24
    1172:	79 f4       	brne	.+30     	; 0x1192 <cprintf+0x52>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	bf 90       	pop	r11
    118a:	af 90       	pop	r10
    118c:	9f 90       	pop	r9
    118e:	8f 90       	pop	r8
    1190:	08 95       	ret
    1192:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
    1196:	f5 01       	movw	r30, r10
    1198:	81 91       	ld	r24, Z+
    119a:	5f 01       	movw	r10, r30
    119c:	85 32       	cpi	r24, 0x25	; 37
    119e:	41 f7       	brne	.-48     	; 0x1170 <cprintf+0x30>
    11a0:	81 91       	ld	r24, Z+
    11a2:	5f 01       	movw	r10, r30
    11a4:	84 36       	cpi	r24, 0x64	; 100
    11a6:	51 f0       	breq	.+20     	; 0x11bc <cprintf+0x7c>
    11a8:	85 36       	cpi	r24, 0x65	; 101
    11aa:	1c f4       	brge	.+6      	; 0x11b2 <cprintf+0x72>
    11ac:	83 36       	cpi	r24, 0x63	; 99
    11ae:	89 f7       	brne	.-30     	; 0x1192 <cprintf+0x52>
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <cprintf+0x88>
    11b2:	83 37       	cpi	r24, 0x73	; 115
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <cprintf+0x96>
    11b6:	88 37       	cpi	r24, 0x78	; 120
    11b8:	61 f7       	brne	.-40     	; 0x1192 <cprintf+0x52>
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <cprintf+0xba>
    11bc:	00 e1       	ldi	r16, 0x10	; 16
    11be:	17 e2       	ldi	r17, 0x27	; 39
    11c0:	ba e0       	ldi	r27, 0x0A	; 10
    11c2:	cb 2e       	mov	r12, r27
    11c4:	d1 2c       	mov	r13, r1
    11c6:	1e c0       	rjmp	.+60     	; 0x1204 <cprintf+0xc4>
    11c8:	f7 01       	movw	r30, r14
    11ca:	80 81       	ld	r24, Z
    11cc:	22 e0       	ldi	r18, 0x02	; 2
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	e2 0e       	add	r14, r18
    11d2:	f3 1e       	adc	r15, r19
    11d4:	de cf       	rjmp	.-68     	; 0x1192 <cprintf+0x52>
    11d6:	a2 e0       	ldi	r26, 0x02	; 2
    11d8:	ca 2e       	mov	r12, r26
    11da:	d1 2c       	mov	r13, r1
    11dc:	ce 0c       	add	r12, r14
    11de:	df 1c       	adc	r13, r15
    11e0:	f7 01       	movw	r30, r14
    11e2:	00 81       	ld	r16, Z
    11e4:	11 81       	ldd	r17, Z+1	; 0x01
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <cprintf+0xac>
    11e8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
    11ec:	f8 01       	movw	r30, r16
    11ee:	81 91       	ld	r24, Z+
    11f0:	8f 01       	movw	r16, r30
    11f2:	88 23       	and	r24, r24
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <cprintf+0xa8>
    11f6:	76 01       	movw	r14, r12
    11f8:	ce cf       	rjmp	.-100    	; 0x1196 <cprintf+0x56>
    11fa:	00 e0       	ldi	r16, 0x00	; 0
    11fc:	10 e1       	ldi	r17, 0x10	; 16
    11fe:	f0 e1       	ldi	r31, 0x10	; 16
    1200:	cf 2e       	mov	r12, r31
    1202:	d1 2c       	mov	r13, r1
    1204:	e2 e0       	ldi	r30, 0x02	; 2
    1206:	8e 2e       	mov	r8, r30
    1208:	91 2c       	mov	r9, r1
    120a:	8e 0c       	add	r8, r14
    120c:	9f 1c       	adc	r9, r15
    120e:	f7 01       	movw	r30, r14
    1210:	e0 80       	ld	r14, Z
    1212:	f1 80       	ldd	r15, Z+1	; 0x01
    1214:	84 36       	cpi	r24, 0x64	; 100
    1216:	b1 f4       	brne	.+44     	; 0x1244 <cprintf+0x104>
    1218:	f7 fe       	sbrs	r15, 7
    121a:	11 c0       	rjmp	.+34     	; 0x123e <cprintf+0xfe>
    121c:	f0 94       	com	r15
    121e:	e1 94       	neg	r14
    1220:	f1 08       	sbc	r15, r1
    1222:	f3 94       	inc	r15
    1224:	8d e2       	ldi	r24, 0x2D	; 45
    1226:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
    122a:	09 c0       	rjmp	.+18     	; 0x123e <cprintf+0xfe>
    122c:	c8 01       	movw	r24, r16
    122e:	6a e0       	ldi	r22, 0x0A	; 10
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    1236:	8b 01       	movw	r16, r22
    1238:	62 30       	cpi	r22, 0x02	; 2
    123a:	71 05       	cpc	r23, r1
    123c:	18 f0       	brcs	.+6      	; 0x1244 <cprintf+0x104>
    123e:	e0 16       	cp	r14, r16
    1240:	f1 06       	cpc	r15, r17
    1242:	a0 f3       	brcs	.-24     	; 0x122c <cprintf+0xec>
    1244:	c7 01       	movw	r24, r14
    1246:	b8 01       	movw	r22, r16
    1248:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    124c:	fb 01       	movw	r30, r22
    124e:	e2 5d       	subi	r30, 0xD2	; 210
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	80 81       	ld	r24, Z
    1254:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <cputchar>
    1258:	c7 01       	movw	r24, r14
    125a:	b8 01       	movw	r22, r16
    125c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    1260:	7c 01       	movw	r14, r24
    1262:	c8 01       	movw	r24, r16
    1264:	b6 01       	movw	r22, r12
    1266:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__udivmodhi4>
    126a:	8b 01       	movw	r16, r22
    126c:	61 15       	cp	r22, r1
    126e:	71 05       	cpc	r23, r1
    1270:	49 f7       	brne	.-46     	; 0x1244 <cprintf+0x104>
    1272:	74 01       	movw	r14, r8
    1274:	90 cf       	rjmp	.-224    	; 0x1196 <cprintf+0x56>

00001276 <__mulsi3>:
    1276:	62 9f       	mul	r22, r18
    1278:	d0 01       	movw	r26, r0
    127a:	73 9f       	mul	r23, r19
    127c:	f0 01       	movw	r30, r0
    127e:	82 9f       	mul	r24, r18
    1280:	e0 0d       	add	r30, r0
    1282:	f1 1d       	adc	r31, r1
    1284:	64 9f       	mul	r22, r20
    1286:	e0 0d       	add	r30, r0
    1288:	f1 1d       	adc	r31, r1
    128a:	92 9f       	mul	r25, r18
    128c:	f0 0d       	add	r31, r0
    128e:	83 9f       	mul	r24, r19
    1290:	f0 0d       	add	r31, r0
    1292:	74 9f       	mul	r23, r20
    1294:	f0 0d       	add	r31, r0
    1296:	65 9f       	mul	r22, r21
    1298:	f0 0d       	add	r31, r0
    129a:	99 27       	eor	r25, r25
    129c:	72 9f       	mul	r23, r18
    129e:	b0 0d       	add	r27, r0
    12a0:	e1 1d       	adc	r30, r1
    12a2:	f9 1f       	adc	r31, r25
    12a4:	63 9f       	mul	r22, r19
    12a6:	b0 0d       	add	r27, r0
    12a8:	e1 1d       	adc	r30, r1
    12aa:	f9 1f       	adc	r31, r25
    12ac:	bd 01       	movw	r22, r26
    12ae:	cf 01       	movw	r24, r30
    12b0:	11 24       	eor	r1, r1
    12b2:	08 95       	ret

000012b4 <__udivmodhi4>:
    12b4:	aa 1b       	sub	r26, r26
    12b6:	bb 1b       	sub	r27, r27
    12b8:	51 e1       	ldi	r21, 0x11	; 17
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <__udivmodhi4_ep>

000012bc <__udivmodhi4_loop>:
    12bc:	aa 1f       	adc	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	a6 17       	cp	r26, r22
    12c2:	b7 07       	cpc	r27, r23
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <__udivmodhi4_ep>
    12c6:	a6 1b       	sub	r26, r22
    12c8:	b7 0b       	sbc	r27, r23

000012ca <__udivmodhi4_ep>:
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	5a 95       	dec	r21
    12d0:	a9 f7       	brne	.-22     	; 0x12bc <__udivmodhi4_loop>
    12d2:	80 95       	com	r24
    12d4:	90 95       	com	r25
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	08 95       	ret

000012dc <__divmodhi4>:
    12dc:	97 fb       	bst	r25, 7
    12de:	09 2e       	mov	r0, r25
    12e0:	07 26       	eor	r0, r23
    12e2:	0a d0       	rcall	.+20     	; 0x12f8 <__divmodhi4_neg1>
    12e4:	77 fd       	sbrc	r23, 7
    12e6:	04 d0       	rcall	.+8      	; 0x12f0 <__divmodhi4_neg2>
    12e8:	e5 df       	rcall	.-54     	; 0x12b4 <__udivmodhi4>
    12ea:	06 d0       	rcall	.+12     	; 0x12f8 <__divmodhi4_neg1>
    12ec:	00 20       	and	r0, r0
    12ee:	1a f4       	brpl	.+6      	; 0x12f6 <__divmodhi4_exit>

000012f0 <__divmodhi4_neg2>:
    12f0:	70 95       	com	r23
    12f2:	61 95       	neg	r22
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255

000012f6 <__divmodhi4_exit>:
    12f6:	08 95       	ret

000012f8 <__divmodhi4_neg1>:
    12f8:	f6 f7       	brtc	.-4      	; 0x12f6 <__divmodhi4_exit>
    12fa:	90 95       	com	r25
    12fc:	81 95       	neg	r24
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	08 95       	ret

00001302 <__udivmodsi4>:
    1302:	a1 e2       	ldi	r26, 0x21	; 33
    1304:	1a 2e       	mov	r1, r26
    1306:	aa 1b       	sub	r26, r26
    1308:	bb 1b       	sub	r27, r27
    130a:	fd 01       	movw	r30, r26
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <__udivmodsi4_ep>

0000130e <__udivmodsi4_loop>:
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	ee 1f       	adc	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	a2 17       	cp	r26, r18
    1318:	b3 07       	cpc	r27, r19
    131a:	e4 07       	cpc	r30, r20
    131c:	f5 07       	cpc	r31, r21
    131e:	20 f0       	brcs	.+8      	; 0x1328 <__udivmodsi4_ep>
    1320:	a2 1b       	sub	r26, r18
    1322:	b3 0b       	sbc	r27, r19
    1324:	e4 0b       	sbc	r30, r20
    1326:	f5 0b       	sbc	r31, r21

00001328 <__udivmodsi4_ep>:
    1328:	66 1f       	adc	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	1a 94       	dec	r1
    1332:	69 f7       	brne	.-38     	; 0x130e <__udivmodsi4_loop>
    1334:	60 95       	com	r22
    1336:	70 95       	com	r23
    1338:	80 95       	com	r24
    133a:	90 95       	com	r25
    133c:	9b 01       	movw	r18, r22
    133e:	ac 01       	movw	r20, r24
    1340:	bd 01       	movw	r22, r26
    1342:	cf 01       	movw	r24, r30
    1344:	08 95       	ret

00001346 <_exit>:
    1346:	f8 94       	cli

00001348 <__stop_program>:
    1348:	ff cf       	rjmp	.-2      	; 0x1348 <__stop_program>
